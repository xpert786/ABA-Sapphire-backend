# Generated by Django 5.2.7 on 2025-10-17 10:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('codename', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Pending', 'Pending'), ('Suspended', 'Suspended')], default='Active', max_length=20)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=10, null=True)),
                ('primary_diagnosis', models.TextField(blank=True, null=True)),
                ('secondary_diagnosis', models.TextField(blank=True, null=True)),
                ('street', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('staff_id', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_name', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_relationship', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_phone', models.CharField(blank=True, max_length=15, null=True)),
                ('parent_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('prefered_contact_method', models.CharField(blank=True, max_length=255, null=True)),
                ('preferred_session_time', models.CharField(blank=True, max_length=255, null=True)),
                ('preferred_session_duration', models.IntegerField(blank=True, null=True)),
                ('service_location', models.CharField(blank=True, max_length=255, null=True)),
                ('preferred_session_telehealth', models.BooleanField(default=False)),
                ('consent_for_treatment', models.FileField(blank=True, null=True, upload_to='intake_documents/')),
                ('hippa_authorization', models.FileField(blank=True, null=True, upload_to='intake_documents/')),
                ('insurance_card', models.FileField(blank=True, null=True, upload_to='intake_documents/')),
                ('physician_referral', models.FileField(blank=True, null=True, upload_to='intake_documents/')),
                ('previous_assessment', models.FileField(blank=True, null=True, upload_to='intake_documents/')),
                ('iep', models.FileField(blank=True, null=True, upload_to='intake_documents/')),
                ('primary_physician', models.CharField(blank=True, max_length=255, null=True)),
                ('emergency_phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('allergies', models.TextField(blank=True, null=True)),
                ('medication', models.TextField(blank=True, null=True)),
                ('special_considerations', models.TextField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('business_name', models.CharField(blank=True, max_length=255, null=True)),
                ('business_address', models.TextField(blank=True, null=True)),
                ('business_website', models.URLField(blank=True, null=True)),
                ('session_duration', models.IntegerField(blank=True, null=True)),
                ('goals', models.TextField(blank=True, null=True)),
                ('session_focus', models.TextField(blank=True, null=True)),
                ('telehealth', models.BooleanField(default=False)),
                ('session_note', models.TextField(blank=True, null=True)),
                ('assigned_bcba', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bcba_clients', to=settings.AUTH_USER_MODEL)),
                ('assigned_rbt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rbt_clients', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('supervisor', models.ForeignKey(blank=True, limit_choices_to={'role__name__in': ['Admin', 'Superadmin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subordinates', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('extra_permissions', models.ManyToManyField(blank=True, to='api.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Certificate name/type', max_length=255)),
                ('certificate_file', models.FileField(blank=True, null=True, upload_to='staff_certificates/')),
                ('certificate_number', models.CharField(blank=True, max_length=255, null=True)),
                ('certificate_issue_date', models.DateField(blank=True, null=True)),
                ('certificate_expiration_date', models.DateField(blank=True, null=True)),
                ('for_lifetime', models.BooleanField(default=False, help_text='Check if certificate is valid for lifetime')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('permissions', models.ManyToManyField(blank=True, to='api.permission')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalCustomUser',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Pending', 'Pending'), ('Suspended', 'Suspended')], default='Active', max_length=20)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=10, null=True)),
                ('primary_diagnosis', models.TextField(blank=True, null=True)),
                ('secondary_diagnosis', models.TextField(blank=True, null=True)),
                ('street', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('staff_id', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_name', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_relationship', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_phone', models.CharField(blank=True, max_length=15, null=True)),
                ('parent_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('prefered_contact_method', models.CharField(blank=True, max_length=255, null=True)),
                ('preferred_session_time', models.CharField(blank=True, max_length=255, null=True)),
                ('preferred_session_duration', models.IntegerField(blank=True, null=True)),
                ('service_location', models.CharField(blank=True, max_length=255, null=True)),
                ('preferred_session_telehealth', models.BooleanField(default=False)),
                ('consent_for_treatment', models.TextField(blank=True, max_length=100, null=True)),
                ('hippa_authorization', models.TextField(blank=True, max_length=100, null=True)),
                ('insurance_card', models.TextField(blank=True, max_length=100, null=True)),
                ('physician_referral', models.TextField(blank=True, max_length=100, null=True)),
                ('previous_assessment', models.TextField(blank=True, max_length=100, null=True)),
                ('iep', models.TextField(blank=True, max_length=100, null=True)),
                ('primary_physician', models.CharField(blank=True, max_length=255, null=True)),
                ('emergency_phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('allergies', models.TextField(blank=True, null=True)),
                ('medication', models.TextField(blank=True, null=True)),
                ('special_considerations', models.TextField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('business_name', models.CharField(blank=True, max_length=255, null=True)),
                ('business_address', models.TextField(blank=True, null=True)),
                ('business_website', models.URLField(blank=True, null=True)),
                ('session_duration', models.IntegerField(blank=True, null=True)),
                ('goals', models.TextField(blank=True, null=True)),
                ('session_focus', models.TextField(blank=True, null=True)),
                ('telehealth', models.BooleanField(default=False)),
                ('session_note', models.TextField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_bcba', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('assigned_rbt', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('supervisor', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'role__name__in': ['Admin', 'Superadmin']}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.role')),
            ],
            options={
                'verbose_name': 'historical user',
                'verbose_name_plural': 'historical users',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='customuser',
            name='role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.role'),
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.permission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserRoleAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

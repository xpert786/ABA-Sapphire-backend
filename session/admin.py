from django.contrib import admin
from .models import (
    Session, SessionTimer, AdditionalTime, PreSessionChecklist,
    Activity, ReinforcementStrategy, ABCEvent, GoalProgress,
    Incident, SessionNote, TimeTracker
)


# Inline admins for related models
class SessionTimerInline(admin.StackedInline):
    model = SessionTimer
    extra = 0
    readonly_fields = ['current_duration']


class AdditionalTimeInline(admin.TabularInline):
    model = AdditionalTime
    extra = 0


class ActivityInline(admin.TabularInline):
    model = Activity
    extra = 0
    fields = ['activity_name', 'duration_minutes', 'reinforcement_strategies', 'notes']


class GoalProgressInline(admin.TabularInline):
    model = GoalProgress
    extra = 0
    fields = ['goal_description', 'is_met', 'implementation_method', 'notes']


class ABCEventInline(admin.TabularInline):
    model = ABCEvent
    extra = 0
    fields = ['antecedent', 'behavior', 'consequence']


class ReinforcementStrategyInline(admin.TabularInline):
    model = ReinforcementStrategy
    extra = 0
    fields = ['strategy_type', 'frequency', 'pr_ratio', 'notes']


class IncidentInline(admin.TabularInline):
    model = Incident
    extra = 0
    fields = ['incident_type', 'behavior_severity', 'start_time', 'duration_minutes', 'description']


class TimeTrackerInline(admin.TabularInline):
    model = TimeTracker
    extra = 0
    readonly_fields = ['duration_display', 'created_by']
    fields = ['time_type', 'start_time', 'end_time', 'duration_display', 'description', 'created_by']


# Main Session Admin
@admin.register(Session)
class SessionAdmin(admin.ModelAdmin):
    list_display = [
        'id', 'session_date', 'client', 'staff', 'status', 
        'start_time', 'end_time', 'location', 'service_type', 
        'has_notes', 'activity_count', 'goal_count'
    ]
    list_filter = ['status', 'session_date', 'service_type', 'staff', 'client']
    search_fields = [
        'client__username', 'client__name', 
        'staff__username', 'staff__name',
        'location', 'session_notes'
    ]
    readonly_fields = [
        'created_at', 'updated_at', 'notes_preview', 
        'session_summary', 'timer_info'
    ]
    
    fieldsets = (
        ('Session Information', {
            'fields': (
                'client', 'staff', 'session_date', 
                'start_time', 'end_time', 'status'
            )
        }),
        ('Location & Service', {
            'fields': ('location', 'service_type', 'duration')
        }),
        ('Session Summary', {
            'fields': ('session_summary', 'timer_info'),
            'classes': ('wide',)
        }),
        ('AI-Generated Session Notes', {
            'fields': ('session_notes', 'notes_preview'),
            'classes': ('wide',),
            'description': 'Professional notes generated by Ocean AI based on session data'
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    inlines = [
        SessionTimerInline,
        ActivityInline,
        GoalProgressInline,
        ABCEventInline,
        ReinforcementStrategyInline,
        IncidentInline,
        AdditionalTimeInline,
        TimeTrackerInline,
    ]
    
    date_hierarchy = 'session_date'
    ordering = ['-session_date', '-start_time']
    
    def has_notes(self, obj):
        """Show if session has AI-generated notes"""
        return bool(obj.session_notes)
    has_notes.boolean = True
    has_notes.short_description = "Has Notes"
    
    def activity_count(self, obj):
        """Show number of activities"""
        return obj.activities.count()
    activity_count.short_description = "Activities"
    
    def goal_count(self, obj):
        """Show number of goals tracked"""
        return obj.goal_progress.count()
    goal_count.short_description = "Goals"
    
    def notes_preview(self, obj):
        """Show preview of AI-generated notes with formatting"""
        if obj.session_notes:
            from django.utils.html import format_html
            # Convert markdown-style formatting to HTML
            notes = obj.session_notes.replace('\n', '<br>')
            notes = notes.replace('**', '<strong>').replace('**', '</strong>')
            return format_html(
                '<div style="padding: 10px; background: #f9f9f9; border-left: 3px solid #4CAF50; max-height: 400px; overflow-y: auto;">'
                '<h3 style="margin-top: 0; color: #4CAF50;">üìù AI-Generated Session Notes</h3>'
                '<div style="line-height: 1.6;">{}</div>'
                '</div>',
                notes
            )
        return format_html(
            '<div style="padding: 10px; background: #fff3cd; border-left: 3px solid #ffc107;">'
            '[WARNING] No AI-generated notes yet. Use the generate-notes API endpoint to create them.'
            '</div>'
        )
    notes_preview.short_description = "AI Notes Preview"
    
    def session_summary(self, obj):
        """Show comprehensive session summary"""
        from django.utils.html import format_html
        
        # Get counts
        activities = obj.activities.count()
        goals = obj.goal_progress.count()
        abc_events = obj.abc_events.count()
        strategies = obj.reinforcement_strategies.count()
        incidents = obj.incidents.count()
        
        summary_html = f'''
        <div style="padding: 15px; background: #e3f2fd; border-radius: 5px;">
            <h3 style="margin-top: 0; color: #1976d2;">üìä Session Summary</h3>
            <table style="width: 100%; border-collapse: collapse;">
                <tr>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Status:</strong></td>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;">{obj.status.upper()}</td>
                </tr>
                <tr>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Activities:</strong></td>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;">{activities}</td>
                </tr>
                <tr>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Goals Tracked:</strong></td>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;">{goals}</td>
                </tr>
                <tr>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>ABC Events:</strong></td>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;">{abc_events}</td>
                </tr>
                <tr>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Reinforcement Strategies:</strong></td>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;">{strategies}</td>
                </tr>
                <tr>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Incidents:</strong></td>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;">{incidents}</td>
                </tr>
            </table>
        </div>
        '''
        return format_html(summary_html)
    session_summary.short_description = "Session Data Summary"
    
    def timer_info(self, obj):
        """Show timer information"""
        from django.utils.html import format_html
        
        try:
            timer = obj.timer
            status_color = '#4CAF50' if timer.is_running else '#9E9E9E'
            status_text = 'RUNNING' if timer.is_running else 'STOPPED'
            
            timer_html = f'''
            <div style="padding: 15px; background: #f5f5f5; border-radius: 5px;">
                <h3 style="margin-top: 0; color: {status_color};">Timer Status: {status_text}</h3>
                <table style="width: 100%; border-collapse: collapse;">
                    <tr>
                        <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Started:</strong></td>
                        <td style="padding: 8px; border-bottom: 1px solid #ddd;">{timer.start_time or 'Not started'}</td>
                    </tr>
                    <tr>
                        <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Ended:</strong></td>
                        <td style="padding: 8px; border-bottom: 1px solid #ddd;">{timer.end_time or 'N/A'}</td>
                    </tr>
                    <tr>
                        <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Total Duration:</strong></td>
                        <td style="padding: 8px; border-bottom: 1px solid #ddd;">{timer.total_duration}</td>
                    </tr>
                </table>
            </div>
            '''
            return format_html(timer_html)
        except:
            return format_html(
                '<div style="padding: 10px; background: #fff3cd; border-left: 3px solid #ffc107;">'
                '[WARNING] Timer not started yet'
                '</div>'
            )
    timer_info.short_description = "Timer Information"


# SessionTimer Admin
@admin.register(SessionTimer)
class SessionTimerAdmin(admin.ModelAdmin):
    list_display = ['session', 'start_time', 'end_time', 'is_running', 'total_duration', 'current_duration']
    list_filter = ['is_running']
    search_fields = ['session__client__username', 'session__staff__username']
    readonly_fields = ['current_duration']


# AdditionalTime Admin
@admin.register(AdditionalTime)
class AdditionalTimeAdmin(admin.ModelAdmin):
    list_display = ['session', 'time_type', 'duration', 'unit', 'reason', 'added_at']
    list_filter = ['time_type', 'unit', 'added_at']
    search_fields = ['session__client__username', 'reason']
    readonly_fields = ['added_at']


# PreSessionChecklist Admin
@admin.register(PreSessionChecklist)
class PreSessionChecklistAdmin(admin.ModelAdmin):
    list_display = ['session', 'item_name', 'is_completed', 'notes']
    list_filter = ['is_completed']
    search_fields = ['session__client__username', 'item_name', 'notes']


# Activity Admin
@admin.register(Activity)
class ActivityAdmin(admin.ModelAdmin):
    list_display = ['session', 'activity_name', 'duration_minutes', 'reinforcement_strategies']
    list_filter = ['activity_name', 'session__session_date']
    search_fields = ['session__client__username', 'activity_name', 'reinforcement_strategies', 'notes']


# ReinforcementStrategy Admin
@admin.register(ReinforcementStrategy)
class ReinforcementStrategyAdmin(admin.ModelAdmin):
    list_display = ['session', 'strategy_type', 'frequency', 'pr_ratio']
    list_filter = ['strategy_type', 'session__session_date']
    search_fields = ['session__client__username', 'strategy_type', 'notes']


# ABCEvent Admin
@admin.register(ABCEvent)
class ABCEventAdmin(admin.ModelAdmin):
    list_display = ['session', 'behavior_preview', 'antecedent_preview', 'consequence_preview', 'timestamp']
    list_filter = ['session__session_date', 'timestamp']
    search_fields = ['session__client__username', 'antecedent', 'behavior', 'consequence']
    readonly_fields = ['timestamp']
    
    def behavior_preview(self, obj):
        return obj.behavior[:50] + "..." if len(obj.behavior) > 50 else obj.behavior
    behavior_preview.short_description = "Behavior"
    
    def antecedent_preview(self, obj):
        return obj.antecedent[:30] + "..." if len(obj.antecedent) > 30 else obj.antecedent
    antecedent_preview.short_description = "Antecedent"
    
    def consequence_preview(self, obj):
        return obj.consequence[:30] + "..." if len(obj.consequence) > 30 else obj.consequence
    consequence_preview.short_description = "Consequence"
    
    fieldsets = (
        ('Session Information', {
            'fields': ('session',)
        }),
        ('ABC Analysis', {
            'fields': ('antecedent', 'behavior', 'consequence'),
            'classes': ('wide',)
        }),
        ('Timestamps', {
            'fields': ('timestamp',),
            'classes': ('collapse',)
        }),
    )


# GoalProgress Admin
@admin.register(GoalProgress)
class GoalProgressAdmin(admin.ModelAdmin):
    list_display = ['session', 'goal_description_preview', 'is_met', 'implementation_method']
    list_filter = ['is_met', 'implementation_method', 'session__session_date']
    search_fields = ['session__client__username', 'goal_description', 'notes']
    
    def goal_description_preview(self, obj):
        return obj.goal_description[:50] + "..." if len(obj.goal_description) > 50 else obj.goal_description
    goal_description_preview.short_description = "Goal Description"


# Incident Admin
@admin.register(Incident)
class IncidentAdmin(admin.ModelAdmin):
    list_display = ['session', 'incident_type', 'behavior_severity', 'description_preview', 'start_time', 'duration_minutes']
    list_filter = ['incident_type', 'behavior_severity', 'start_time', 'created_at']
    search_fields = ['session__client__username', 'incident_type', 'description']
    readonly_fields = ['created_at']
    
    def description_preview(self, obj):
        return obj.description[:50] + "..." if len(obj.description) > 50 else obj.description
    description_preview.short_description = "Description"
    
    fieldsets = (
        ('Incident Information', {
            'fields': ('session', 'incident_type', 'behavior_severity')
        }),
        ('Timing', {
            'fields': ('start_time', 'duration_minutes')
        }),
        ('Details', {
            'fields': ('description',),
            'classes': ('wide',)
        }),
        ('Timestamps', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )


# SessionNote Admin
@admin.register(SessionNote)
class SessionNoteAdmin(admin.ModelAdmin):
    list_display = ['session', 'note_type', 'note_preview', 'created_at']
    list_filter = ['note_type', 'created_at']
    search_fields = ['session__client__username', 'note_content']
    readonly_fields = ['created_at']
    
    def note_preview(self, obj):
        return obj.note_content[:100] + "..." if len(obj.note_content) > 100 else obj.note_content
    note_preview.short_description = "Note Content"
    
    fieldsets = (
        ('Note Information', {
            'fields': ('session', 'note_type')
        }),
        ('Content', {
            'fields': ('note_content',),
            'classes': ('wide',)
        }),
        ('Timestamps', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )


# TimeTracker Admin
@admin.register(TimeTracker)
class TimeTrackerAdmin(admin.ModelAdmin):
    list_display = [
        'id', 'session', 'time_type', 'start_time', 
        'end_time', 'duration_display', 'created_by', 'created_at'
    ]
    list_filter = ['time_type', 'created_at', 'session__session_date']
    search_fields = [
        'session__client__username', 'session__staff__username',
        'created_by__username', 'description'
    ]
    readonly_fields = ['duration', 'duration_display', 'created_at', 'updated_at']
    
    fieldsets = (
        ('Time Entry Information', {
            'fields': ('session', 'time_type', 'created_by')
        }),
        ('Time Period', {
            'fields': ('start_time', 'end_time', 'duration_display')
        }),
        ('Description', {
            'fields': ('description',),
            'classes': ('wide',)
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    date_hierarchy = 'start_time'
    ordering = ['-start_time']
